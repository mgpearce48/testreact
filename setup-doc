### Setup Environment & CI/CD for testreact project ###

## Start ##

## (1) Create network bridge ##
docker network create jenkins

## (2) Create container for docker:dind image ##
docker run --name jenkins-docker --rm --detach \
  --privileged --network jenkins --network-alias docker \
  --env DOCKER_TLS_CERTDIR=/certs \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  --publish 3001:3000 --publish 2376:2376 \
  docker:dind --storage-driver overlay2

## (3) Create Dockerfile ##
FROM jenkins/jenkins:2.346.1-jdk11
USER root
RUN apt-get update && apt-get install -y lsb-release
RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \
  https://download.docker.com/linux/debian/gpg
RUN echo "deb [arch=$(dpkg --print-architecture) \
  signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \
  https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
RUN apt-get update && apt-get install -y docker-ce-cli
USER jenkins
RUN jenkins-plugin-cli --plugins "blueocean:1.25.5 docker-workflow:1.28"

## (4) Build image ##
docker build -t myjenkins-blueocean:2.346.1-1 .

## (5) Create jenkins container ##
docker run --name jenkins-blueocean --detach \
  --network jenkins --env DOCKER_HOST=tcp://docker:2376 \
  --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 \
  --publish 8080:8080 --publish 50000:50000 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  --volume "$HOME"/dev/jenkins:/home \
  --restart=on-failure \
  --env JAVA_OPTS="-Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true" \
  myjenkins-blueocean:2.346.1-1

## (6) Create container for development environment ##
docker run --name testreact-dev --rm --detach \
  --volume ~/dev/react/testreact/src:/app/src \
  --interactive --tty --publish 3000:3000 \
  testreact-dev

## (7) Create Git dev branch and push to remote ##
git checkout -b dev

## (8) Push dev branch to remote ##
git push origin dev

## (9) Ensure all dev code changes are in dev branch ##
git switch dev

## (10) Upload code changes to repository ##
git add .
git commit -m "comments"
git push [origin dev]

## (11) Login to GitHub and merge changes to main branch ##

## (12) Build Jenkins pipeline (test in build environment) ##

## (13) SSH to production server and pull latest image ##
docker pull mgpearce/testreact

## (14) Create and run new container ##
docker stop testreact
docker run --name testreact -d --rm -it -p 80:80 mgpearce/testreact

## (15) Remove old image ##
docker rmi [imageID]

## End ##
